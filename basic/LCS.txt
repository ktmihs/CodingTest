/* 2차원 길이 출력 */
const A = ' ' + input[0];
const B = ' ' + input[1];
const dp = [...Array(A.length)].map(e => Array(B.length).fill(0));

for (let i = 1; i < A.length; i++) {
  for (let j = 1; j < B.length; j++) {
    if (A[i] === B[j]) dp[i][j] = dp[i - 1][j - 1] + 1;
    else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
  }
}
return dp[A.length - 1][B.length - 1];

/* 2차원 문자 출력 */
const s1 = " " + input[0];
const s2 = " " + input[1];
let dy = [...Array(s1.length)].map((e) => Array(s2.length).fill(""));

for (let i = 1; i < s1.length; i++) {
    for (let j = 1; j < s2.length; j++) {
        if (s1[i] === s2[j]) {
            dy[i][j] = dy[i - 1][j - 1] + s1[i];
        } else {
            if (dy[i][j - 1].length >= dy[i - 1][j].length)
                dy[i][j] = dy[i][j - 1];
            else dy[i][j] = dy[i - 1][j];
        }
    }
}
return dy[s1.length - 1][s2.length - 1];

/* 3차원 */
const s1 = " " + input[0];
const s2 = " " + input[1];
const s3 = " " + input[2];
const dp = [...Array(s1.length)].map(e => [...Array(s2.length)].map(e => Array(s3.length).fill(0)));

for (let i = 1; i < s1.length; i++) {
  for (let j = 1; j < s2.length; j++) {
    for (let k = 1; k < s3.length; k++) {
      if (s1[i] === s2[j] && s2[j] === s3[k]) dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;
      else dp[i][j][k] = Math.max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);
    }
  }
}
return dp[s1.length - 1][s2.length - 1][s3.length - 1];
