class maxHeap {
  constructor() {
    this.heap = []
    this.heap.push(1e9)
  }
  insert(val) {
    this.heap.push(val)
    this.upheap(this.heap.length - 1)
  }
  upheap(pos) {
    let tmp = this.heap[pos]
    while (tmp > this.heap[Math.floor(pos / 2)]) {
      this.heap[pos] = this.heap[Math.floor(pos / 2)]
      pos = Math.floor(pos / 2)
    }
    this.heap[pos] = tmp
  }
  get() {
    if (this.heap.length === 2) return this.heap.pop()
    if (this.heap.length === 1) return false

    let res = this.heap[1]

    this.heap[1] = this.heap.pop()
    this.downheap(1, this.heap.length - 1)
    return res
  }
  size() {
    return this.heap.length - 1
  }
  top() {
    return this.heap[1];
  }

  downheap(pos, len) {
    let tmp = this.heap[pos],
      child
    while (pos <= Math.floor(len / 2)) {
      child = pos * 2
      if (child < len && this.heap[child] < this.heap[child + 1]) child++ 
      if (tmp >= this.heap[child]) break
      this.heap[pos] = this.heap[child]
      pos = child
    }
    this.heap[pos] = tmp
  }
}